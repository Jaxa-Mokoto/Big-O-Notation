O(n) = Linear Time.
It is common to see this notation in most algorithms defined today.
O(n) states defines a linear relationship between the Elements and the # of operations to be executed (i.e. a single for-loop)


Question:

// What is the Big O of the below function? (Hint, you may want to go line by line)
function funChallenge(input) {
  let a = 10; // O(1)
  a = 50 + 3; // O(1)

  for (let i = 0; i < input.length; i++) { // O(n)
    anotherFunction(); // O(n) - outside of this function
    let stranger = true; // O(n)
    a++; O(n)
  }
  return a; // O(1)
}

Answer = O(3 + 4n)
Reasoning: as the number of elements increase in the input (i.e. length in this case), there will be a linear proportion of operations required to execute in the loop
this is inaddition to the Constant Time O notation which in this case was O(1) x 3 = O(3)
Remember that loops are linear time O(n)
